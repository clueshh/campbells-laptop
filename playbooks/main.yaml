---
- name: Install local laptop requirements
  hosts: localhost
  tags: [install]
  tasks:
    - name: Always gather facts (incase run with tags)
      ansible.builtin.setup:
      tags: always

    - name: Add apt keys
      tags: apt-repo-key
      ansible.builtin.apt_key:
        url: "{{ item.url }}"
        keyring: "{{ item.keyring }}"
        state: present
      become: true
      loop: "{{ apt_keys }}"

    - name: Add apt repos
      tags: apt-repo
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        state: present
      become: true
      loop: "{{ apt_repos }}"
      when: item is string

    - name: Add apt repos (with filename)
      tags: apt-repo
      ansible.builtin.apt_repository:
        repo: "{{ item.repo }}"
        filename: "{{ item.filename }}"
        state: present
      become: true
      loop: "{{ apt_repos }}"
      when: item is mapping

    - name: Preseed to prevent Microsoft repo being added
      # https://code.visualstudio.com/docs/setup/linux#_debian-and-ubuntu-based-distributions
      ansible.builtin.debconf:
        name: code
        question: "code/add-microsoft-repo"
        value: "false"
        vtype: boolean
      become: true

    - name: Apt install software
      tags: [software-install, apt]
      ansible.builtin.apt:
        state: present
        name: "{{ item }}"
      become: true
      loop: "{{ apt_install }}"

    - name: Apt install k9s
      tags: [software-install, apt, k9s]
      ansible.builtin.apt:
        state: present
        deb: "https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_linux_amd64.deb"
      become: true

    - name: Snap install software
      tags: [software-install, snap]
      community.general.snap:
        state: present
        name: "{{ item }}"
        classic: "{{ item in snap_classic }}"
      become: true
      loop: "{{ snap_install }}"

    - name: Find all .desktop files in snap installed apps
      tags: [software-install, snap]
      ansible.builtin.find:
        recurse: false
        paths: /var/lib/snapd/desktop/applications/
        patterns: "*.desktop"
      register: find

    - name: Link snap installed apps to /usr/share/applications
      tags: [software-install, snap]
      ansible.builtin.file:
        src: "{{ item.path }}"
        path: "/usr/share/applications/{{ item.path | basename }}"
        state: link
      become: true
      loop: "{{ find.files }}"
      loop_control:
        label: "{{ item.path | basename }}"

    - name: Check if aws binary is in PATH
      tags: [software-install, awscli]
      ansible.builtin.command: which aws
      changed_when: aws_path.rc != 0
      register: aws_path
      ignore_errors: true
      no_log: true

    - name: Install aws cli
      tags: [software-install, awscli]
      ansible.builtin.import_role:
        name: deekayen.awscli2
      when: aws_path.rc != 0

    - name: Install oh-my-zsh
      tags: [zsh, ohmyzsh]
      ansible.builtin.import_role:
        name: manala.roles.ohmyzsh
      become: true

    - name: Install zsh plugins
      tags: [zsh, zsh-plugins]
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        version: "{{ item.version | default('HEAD') }}"
      become: true
      loop: "{{ zsh_plugins }}"

    - name: Install Atuin
      tags: [zsh, atuin]
      ansible.builtin.unarchive:
        src: https://github.com/atuinsh/atuin/releases/download/{{ atuin_version }}/atuin-x86_64-unknown-linux-gnu.tar.gz
        dest: /usr/local/bin
        remote_src: true
        mode: "0755"
        include: [atuin-x86_64-unknown-linux-gnu/atuin]
        extra_opts: ["--strip-components=1", "--show-stored-names"]
      become: true

    - name: Install starship
      tags: [zsh, starship]
      ansible.builtin.import_role:
        name: rolehippie.starship
      become: true

    - name: Install nvm
      tags: nvm
      ansible.builtin.import_role:
        name: nvm

    - name: Install pyenv
      tags: pyenv
      ansible.builtin.import_role:
        name: staticdev.pyenv

    - name: Install golang
      tags: golang
      ansible.builtin.import_role:
        name: gantsign.golang

    - name: Ensure fonts directory exists
      tags: fonts
      ansible.builtin.file:
        path: "{{ fonts_path | default('/usr/share/fonts/TTF') }}"
        state: directory
        mode: "0755"
      become: true

    - name: Install Consolas ligaturized fonts for vscode
      tags: fonts
      ansible.builtin.copy:
        src: "files/fonts/{{ item }}"
        dest: "{{ fonts_path | default('/usr/share/fonts/TTF') }}/{{ item }}"
        mode: "0644"
      become: true
      loop:
        - Consolasligaturizedv3-Bold.ttf
        - Consolasligaturizedv3-BoldItalic.ttf
        - Consolasligaturizedv3-Italic.ttf
        - Consolasligaturizedv3.ttf

    - name: Download and extract FiraCode Nerd Font
      tags: fonts
      ansible.builtin.unarchive:
        src: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/FiraCode.zip"
        dest: "{{ fonts_path | default('/usr/share/fonts/TTF') }}"
        remote_src: true
      become: true

- name: Configure general
  tags: [configure, general-config]
  ansible.builtin.import_playbook: general-config.yaml

- name: System update
  hosts: localhost
  tags: software-update-all
  tasks:
    - name: Apt update all packages
      ansible.builtin.apt:
        update_cache: true
        name: "*"
        state: latest
        only_upgrade: true
      become: true
