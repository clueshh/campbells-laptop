---
- name: General configuration
  hosts: localhost
  tasks:
    - name: Ensure ~/.local/bin exists
      tags: user
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.local/bin"
        state: directory
        mode: "0755"

    - name: Symlink batcat to bat
      tags: user
      ansible.builtin.file:
        src: /usr/bin/batcat
        dest: "{{ ansible_env.HOME }}/.local/bin/bat"
        state: link

    - name: Add ~/.local/bin to .zshenv
      tags: user
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        line: "path+=('{{ ansible_env.HOME }}/.local/bin')"
        create: true
        mode: "0644"

    - name: Configure docker and ssh key for {{ ansible_user_id }}
      tags: user
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: [docker]
        append: true
        generate_ssh_key: true
        ssh_key_comment: "{{ ansible_user_id }}@{{ ansible_hostname }}"
      become: true

    - name: Enable passwordless sudo for {{ ansible_user_id }}
      tags: user
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/{{ ansible_user_id }}
        line: "{{ ansible_user_id }} ALL=(ALL) NOPASSWD:ALL"
        validate: "visudo -cf %s"
        create: true
        mode: "0440"
      become: true

    - name: Add GOPATH to .zshenv
      tags: golang
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        line: "path+=('{{ ansible_local.golang.general.home }}/bin' '{{ ansible_env.HOME }}/go/bin')"
        create: true
        mode: "0644"

    - name: Add k9s completions to .zshrc
      tags: k9s
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        line: "source <(k9s completion zsh)"

    - name: Add dive to .zshrc
      tags: dive
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        line: alias dive="docker run -ti --rm  -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive"

    - name: Download juju completions
      tags: juju
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/juju/juju/main/etc/bash_completion.d/juju
        dest: "/usr/share/bash-completion/completions/juju"
        mode: "0644"
      become: true

    - name: Configure git
      tags: git
      community.general.git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - name: user.name
          value: "{{ git_username }}"
        - name: user.email
          value: "{{ git_email }}"

    - name: Make Konsave directory
      tags: konsave
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/konsave"
        state: directory
        mode: "0755"

    - name: Configure Konsave
      tags: konsave
      ansible.builtin.copy:
        src: "files/konsave/conf.yaml"
        dest: "{{ ansible_env.HOME }}/.config/konsave/conf.yaml"
        mode: "0644"

    - name: Autoload .nvmrc
      tags: nvm
      ansible.builtin.blockinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        marker_begin: "BEGIN auto load .nvmrc"
        marker_end: "END auto load .nvmrc"
        prepend_newline: true
        append_newline: true
        block: |
          # https://github.com/nvm-sh/nvm?tab=readme-ov-file#zsh
          autoload -U add-zsh-hook

          load-nvmrc() {
            local nvmrc_path
            nvmrc_path="$(nvm_find_nvmrc)"

            if [ -n "$nvmrc_path" ]; then
              local nvmrc_node_version
              nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

              if [ "$nvmrc_node_version" = "N/A" ]; then
                nvm install
              elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
                nvm use
              fi
            elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
              echo "Reverting to nvm default version"
              nvm use default
            fi
          }

          add-zsh-hook chpwd load-nvmrc
          load-nvmrc > /dev/null
